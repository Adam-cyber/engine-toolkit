// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import api "github.com/veritone/edge-stream-ingestor/api"
import context "context"
import io "io"
import mock "github.com/stretchr/testify/mock"

// CoreAPIClient is an autogenerated mock type for the CoreAPIClient type
type CoreAPIClient struct {
	mock.Mock
}

// AddMediaSegment provides a mock function with given fields: ctx, asset
func (_m *CoreAPIClient) AddMediaSegment(ctx context.Context, asset *api.Asset) error {
	ret := _m.Called(ctx, asset)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *api.Asset) error); ok {
		r0 = rf(ctx, asset)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreateAsset provides a mock function with given fields: ctx, asset, r
func (_m *CoreAPIClient) CreateAsset(ctx context.Context, asset *api.Asset, r io.Reader) (*api.Asset, error) {
	ret := _m.Called(ctx, asset, r)

	var r0 *api.Asset
	if rf, ok := ret.Get(0).(func(context.Context, *api.Asset, io.Reader) *api.Asset); ok {
		r0 = rf(ctx, asset, r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*api.Asset)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *api.Asset, io.Reader) error); ok {
		r1 = rf(ctx, asset, r)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateNextPipelineJob provides a mock function with given fields: ctx, jobID, tdoID, startOffsetMS, endOffsetMS
func (_m *CoreAPIClient) CreateNextPipelineJob(ctx context.Context, jobID string, tdoID string, startOffsetMS int, endOffsetMS int) ([]api.Job, error) {
	ret := _m.Called(ctx, jobID, tdoID, startOffsetMS, endOffsetMS)

	var r0 []api.Job
	if rf, ok := ret.Get(0).(func(context.Context, string, string, int, int) []api.Job); ok {
		r0 = rf(ctx, jobID, tdoID, startOffsetMS, endOffsetMS)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]api.Job)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string, int, int) error); ok {
		r1 = rf(ctx, jobID, tdoID, startOffsetMS, endOffsetMS)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateTDO provides a mock function with given fields: ctx, tdo, taskID
func (_m *CoreAPIClient) CreateTDO(ctx context.Context, tdo api.TDO, taskID string) (*api.TDO, error) {
	ret := _m.Called(ctx, tdo, taskID)

	var r0 *api.TDO
	if rf, ok := ret.Get(0).(func(context.Context, api.TDO, string) *api.TDO); ok {
		r0 = rf(ctx, tdo, taskID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*api.TDO)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, api.TDO, string) error); ok {
		r1 = rf(ctx, tdo, taskID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FetchTDO provides a mock function with given fields: ctx, tdoID
func (_m *CoreAPIClient) FetchTDO(ctx context.Context, tdoID string) (*api.TDO, error) {
	ret := _m.Called(ctx, tdoID)

	var r0 *api.TDO
	if rf, ok := ret.Get(0).(func(context.Context, string) *api.TDO); ok {
		r0 = rf(ctx, tdoID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*api.TDO)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, tdoID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetSignedURL provides a mock function with given fields: ctx
func (_m *CoreAPIClient) GetSignedURL(ctx context.Context) (string, string, error) {
	ret := _m.Called(ctx)

	var r0 string
	if rf, ok := ret.Get(0).(func(context.Context) string); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 string
	if rf, ok := ret.Get(1).(func(context.Context) string); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Get(1).(string)
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(context.Context) error); ok {
		r2 = rf(ctx)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// ResetURLCache provides a mock function with given fields:
func (_m *CoreAPIClient) ResetURLCache() {
	_m.Called()
}

// UpdateTDO provides a mock function with given fields: ctx, tdo, setStartStopTimes
func (_m *CoreAPIClient) UpdateTDO(ctx context.Context, tdo api.TDO, setStartStopTimes bool) (*api.TDO, error) {
	ret := _m.Called(ctx, tdo, setStartStopTimes)

	var r0 *api.TDO
	if rf, ok := ret.Get(0).(func(context.Context, api.TDO, bool) *api.TDO); ok {
		r0 = rf(ctx, tdo, setStartStopTimes)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*api.TDO)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, api.TDO, bool) error); ok {
		r1 = rf(ctx, tdo, setStartStopTimes)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
