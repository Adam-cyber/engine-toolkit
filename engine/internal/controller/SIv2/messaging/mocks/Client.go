// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import context "context"
import messaging "github.com/veritone/edge-stream-ingestor/messaging"
import mock "github.com/stretchr/testify/mock"

// Client is an autogenerated mock type for the Client type
type Client struct {
	mock.Mock
}

// Close provides a mock function with given fields:
func (_m *Client) Close() []error {
	ret := _m.Called()

	var r0 []error
	if rf, ok := ret.Get(0).(func() []error); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]error)
		}
	}

	return r0
}

// Consume provides a mock function with given fields: ctx, topic
func (_m *Client) Consume(ctx context.Context, topic string) <-chan messaging.ConsumerMessage {
	ret := _m.Called(ctx, topic)

	var r0 <-chan messaging.ConsumerMessage
	if rf, ok := ret.Get(0).(func(context.Context, string) <-chan messaging.ConsumerMessage); ok {
		r0 = rf(ctx, topic)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(<-chan messaging.ConsumerMessage)
		}
	}

	return r0
}

// ConsumeWithPartition provides a mock function with given fields: ctx, topic, partition
func (_m *Client) ConsumeWithPartition(ctx context.Context, topic string, partition int32) <-chan messaging.ConsumerMessage {
	ret := _m.Called(ctx, topic, partition)

	var r0 <-chan messaging.ConsumerMessage
	if rf, ok := ret.Get(0).(func(context.Context, string, int32) <-chan messaging.ConsumerMessage); ok {
		r0 = rf(ctx, topic, partition)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(<-chan messaging.ConsumerMessage)
		}
	}

	return r0
}

// Err provides a mock function with given fields:
func (_m *Client) Err() <-chan error {
	ret := _m.Called()

	var r0 <-chan error
	if rf, ok := ret.Get(0).(func() <-chan error); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(<-chan error)
		}
	}

	return r0
}

// ProduceHash provides a mock function with given fields: ctx, topic, key, value
func (_m *Client) ProduceHash(ctx context.Context, topic string, key string, value []byte) (error, int32, int64) {
	ret := _m.Called(ctx, topic, key, value)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, []byte) error); ok {
		r0 = rf(ctx, topic, key, value)
	} else {
		r0 = ret.Error(0)
	}

	var r1 int32
	if rf, ok := ret.Get(1).(func(context.Context, string, string, []byte) int32); ok {
		r1 = rf(ctx, topic, key, value)
	} else {
		r1 = ret.Get(1).(int32)
	}

	var r2 int64
	if rf, ok := ret.Get(2).(func(context.Context, string, string, []byte) int64); ok {
		r2 = rf(ctx, topic, key, value)
	} else {
		r2 = ret.Get(2).(int64)
	}

	return r0, r1, r2
}

// ProduceManual provides a mock function with given fields: ctx, topic, partition, key, value
func (_m *Client) ProduceManual(ctx context.Context, topic string, partition int32, key string, value []byte) (error, int32, int64) {
	ret := _m.Called(ctx, topic, partition, key, value)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, int32, string, []byte) error); ok {
		r0 = rf(ctx, topic, partition, key, value)
	} else {
		r0 = ret.Error(0)
	}

	var r1 int32
	if rf, ok := ret.Get(1).(func(context.Context, string, int32, string, []byte) int32); ok {
		r1 = rf(ctx, topic, partition, key, value)
	} else {
		r1 = ret.Get(1).(int32)
	}

	var r2 int64
	if rf, ok := ret.Get(2).(func(context.Context, string, int32, string, []byte) int64); ok {
		r2 = rf(ctx, topic, partition, key, value)
	} else {
		r2 = ret.Get(2).(int64)
	}

	return r0, r1, r2
}

// ProduceRandom provides a mock function with given fields: ctx, topic, key, value
func (_m *Client) ProduceRandom(ctx context.Context, topic string, key string, value []byte) (error, int32, int64) {
	ret := _m.Called(ctx, topic, key, value)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, []byte) error); ok {
		r0 = rf(ctx, topic, key, value)
	} else {
		r0 = ret.Error(0)
	}

	var r1 int32
	if rf, ok := ret.Get(1).(func(context.Context, string, string, []byte) int32); ok {
		r1 = rf(ctx, topic, key, value)
	} else {
		r1 = ret.Get(1).(int32)
	}

	var r2 int64
	if rf, ok := ret.Get(2).(func(context.Context, string, string, []byte) int64); ok {
		r2 = rf(ctx, topic, key, value)
	} else {
		r2 = ret.Get(2).(int64)
	}

	return r0, r1, r2
}
